// Package url_shortner provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package url_shortner

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// MetricsData request with any body
	MetricsDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MetricsData(ctx context.Context, body MetricsDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Redirect request
	GetApiV1Redirect(ctx context.Context, shortenUrl string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUrlShortner request with any body
	PostUrlShortnerWithBody(ctx context.Context, params *PostUrlShortnerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUrlShortner(ctx context.Context, params *PostUrlShortnerParams, body PostUrlShortnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPing request with any body
	GetPingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPing(ctx context.Context, body GetPingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) MetricsDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MetricsData(ctx context.Context, body MetricsDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMetricsDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Redirect(ctx context.Context, shortenUrl string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RedirectRequest(c.Server, shortenUrl)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUrlShortnerWithBody(ctx context.Context, params *PostUrlShortnerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUrlShortnerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUrlShortner(ctx context.Context, params *PostUrlShortnerParams, body PostUrlShortnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUrlShortnerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPing(ctx context.Context, body GetPingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewMetricsDataRequest calls the generic MetricsData builder with application/json body
func NewMetricsDataRequest(server string, body MetricsDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMetricsDataRequestWithBody(server, "application/json", bodyReader)
}

// NewMetricsDataRequestWithBody generates requests for MetricsData with any type of body
func NewMetricsDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1RedirectRequest generates requests for GetApiV1Redirect
func NewGetApiV1RedirectRequest(server string, shortenUrl string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "shorten_url", runtime.ParamLocationPath, shortenUrl)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/redirect/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUrlShortnerRequest calls the generic PostUrlShortner builder with application/json body
func NewPostUrlShortnerRequest(server string, params *PostUrlShortnerParams, body PostUrlShortnerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUrlShortnerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostUrlShortnerRequestWithBody generates requests for PostUrlShortner with any type of body
func NewPostUrlShortnerRequestWithBody(server string, params *PostUrlShortnerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/url-shortener")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.XTraceId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-trace-id", runtime.ParamLocationHeader, *params.XTraceId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("x-trace-id", headerParam0)
	}

	return req, nil
}

// NewGetPingRequest calls the generic GetPing builder with application/json body
func NewGetPingRequest(server string, body GetPingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPingRequestWithBody(server, "application/json", bodyReader)
}

// NewGetPingRequestWithBody generates requests for GetPing with any type of body
func NewGetPingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// MetricsData request with any body
	MetricsDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetricsDataResponse, error)

	MetricsDataWithResponse(ctx context.Context, body MetricsDataJSONRequestBody, reqEditors ...RequestEditorFn) (*MetricsDataResponse, error)

	// GetApiV1Redirect request
	GetApiV1RedirectWithResponse(ctx context.Context, shortenUrl string, reqEditors ...RequestEditorFn) (*GetApiV1RedirectResponse, error)

	// PostUrlShortner request with any body
	PostUrlShortnerWithBodyWithResponse(ctx context.Context, params *PostUrlShortnerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUrlShortnerResponse, error)

	PostUrlShortnerWithResponse(ctx context.Context, params *PostUrlShortnerParams, body PostUrlShortnerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUrlShortnerResponse, error)

	// GetPing request with any body
	GetPingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPingResponse, error)

	GetPingWithResponse(ctx context.Context, body GetPingJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPingResponse, error)
}

type MetricsDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data  *MetricsResponse `json:"data,omitempty"`
		Error *ErrorResponse   `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r MetricsDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MetricsDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RedirectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiV1RedirectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RedirectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUrlShortnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data  *UrlShortnerResponse `json:"data,omitempty"`
		Error *ErrorResponse       `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostUrlShortnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUrlShortnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// MetricsDataWithBodyWithResponse request with arbitrary body returning *MetricsDataResponse
func (c *ClientWithResponses) MetricsDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MetricsDataResponse, error) {
	rsp, err := c.MetricsDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsDataResponse(rsp)
}

func (c *ClientWithResponses) MetricsDataWithResponse(ctx context.Context, body MetricsDataJSONRequestBody, reqEditors ...RequestEditorFn) (*MetricsDataResponse, error) {
	rsp, err := c.MetricsData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMetricsDataResponse(rsp)
}

// GetApiV1RedirectWithResponse request returning *GetApiV1RedirectResponse
func (c *ClientWithResponses) GetApiV1RedirectWithResponse(ctx context.Context, shortenUrl string, reqEditors ...RequestEditorFn) (*GetApiV1RedirectResponse, error) {
	rsp, err := c.GetApiV1Redirect(ctx, shortenUrl, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RedirectResponse(rsp)
}

// PostUrlShortnerWithBodyWithResponse request with arbitrary body returning *PostUrlShortnerResponse
func (c *ClientWithResponses) PostUrlShortnerWithBodyWithResponse(ctx context.Context, params *PostUrlShortnerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUrlShortnerResponse, error) {
	rsp, err := c.PostUrlShortnerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUrlShortnerResponse(rsp)
}

func (c *ClientWithResponses) PostUrlShortnerWithResponse(ctx context.Context, params *PostUrlShortnerParams, body PostUrlShortnerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUrlShortnerResponse, error) {
	rsp, err := c.PostUrlShortner(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUrlShortnerResponse(rsp)
}

// GetPingWithBodyWithResponse request with arbitrary body returning *GetPingResponse
func (c *ClientWithResponses) GetPingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPingResponse, error) {
	rsp, err := c.GetPingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPingResponse(rsp)
}

func (c *ClientWithResponses) GetPingWithResponse(ctx context.Context, body GetPingJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPingResponse, error) {
	rsp, err := c.GetPing(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPingResponse(rsp)
}

// ParseMetricsDataResponse parses an HTTP response from a MetricsDataWithResponse call
func ParseMetricsDataResponse(rsp *http.Response) (*MetricsDataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MetricsDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data  *MetricsResponse `json:"data,omitempty"`
			Error *ErrorResponse   `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1RedirectResponse parses an HTTP response from a GetApiV1RedirectWithResponse call
func ParseGetApiV1RedirectResponse(rsp *http.Response) (*GetApiV1RedirectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RedirectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostUrlShortnerResponse parses an HTTP response from a PostUrlShortnerWithResponse call
func ParsePostUrlShortnerResponse(rsp *http.Response) (*PostUrlShortnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUrlShortnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data  *UrlShortnerResponse `json:"data,omitempty"`
			Error *ErrorResponse       `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPingResponse parses an HTTP response from a GetPingWithResponse call
func ParseGetPingResponse(rsp *http.Response) (*GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
