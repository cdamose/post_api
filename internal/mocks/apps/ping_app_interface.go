// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "post_api/internal/post/model/dto"

	mock "github.com/stretchr/testify/mock"
)

// PingApp is an autogenerated mock type for the PingApp type
type PingApp struct {
	mock.Mock
}

// Ping provides a mock function with given fields: ctx
func (_m *PingApp) Ping(ctx context.Context) (*dto.Ping, error) {
	ret := _m.Called(ctx)

	var r0 *dto.Ping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*dto.Ping, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *dto.Ping); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Ping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPingApp creates a new instance of PingApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPingApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *PingApp {
	mock := &PingApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
